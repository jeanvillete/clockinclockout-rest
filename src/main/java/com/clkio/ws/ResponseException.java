
package com.clkio.ws;

import java.io.IOException;
import java.io.StringWriter;

import javax.xml.ws.WebFault;

import com.clkio.schemas.common.ResponseFault;
import com.clkio.web.enums.ContentType;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebFault(name = "responseFault", targetNamespace = "http://schemas.clkio.com")
public class ResponseException
    extends Exception
{

    /**
     * Java type that goes as soapenv:Fault detail element.
     * 
     */
    private ResponseFault faultInfo;

    /**
     * 
     * @param faultInfo
     * @param message
     */
    public ResponseException(String message, ResponseFault faultInfo) {
        super(message);
        this.faultInfo = faultInfo;
    }

    /**
     * 
     * @param faultInfo
     * @param cause
     * @param message
     */
    public ResponseException(String message, ResponseFault faultInfo, Throwable cause) {
        super(message, cause);
        this.faultInfo = faultInfo;
    }

    /**
     * 
     * @return
     *     returns fault bean: com.clkio.schemas.common.ResponseFault
     */
    public ResponseFault getFaultInfo() {
        return faultInfo;
    }
    
    public int getStatusCode() {
    	return faultInfo != null && faultInfo.getStatusCode() != null ?
    			Integer.parseInt( faultInfo.getStatusCode() ) : 500;
    }
    
    public String getMessage( ContentType accept ) {
		if ( accept == null ) return "";
		else if ( accept.equals( ContentType.APPLICATION_JSON ) ) {
			StringWriter sw = new StringWriter();
			try {
				JsonGenerator jGenerator = new JsonFactory().createGenerator( sw );
				jGenerator.writeStartObject();
				jGenerator.writeStringField( "message", this.getMessage() );
				jGenerator.writeEndObject();
				jGenerator.close();
			} catch ( IOException e ) { }
			return sw.toString();
		} else if ( accept.equals( ContentType.APPLICATION_XML ) ) {
			throw new IllegalStateException("Method not implemented yet!");
		} else throw new IllegalArgumentException( "Invalid value for 'accept' argument." );
	}

}
